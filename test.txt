def __call__(self, company: str, remove_acronyms: bool, remove_locations: bool) -> str:
    if not isinstance(company, str):
        raise TypeError(f"company must be a string and not {type(company)}")
    
    # Initialize step_preprocessing list
    step_preprocessing = []
    
    def append_step(original, processed, step_name):
        if original != processed:
            step_preprocessing.append(step_name)

    original = company
    company = self.remove_accents(company)
    append_step(original, company, 'remove_accents')
    
    original = company
    company = company.lower()
    append_step(original, company, 'lowercase')
    
    original = company
    company = re.sub(r"\b(?:[a-z]\.){2,}\b", lambda m: m.group(0).replace(".", ""), company)
    append_step(original, company, 'normalize_acronyms')
    
    original = company
    company = re.sub(r"[^\w\s]", " ", company)
    append_step(original, company, 'remove_special_characters')
    
    original = company
    company = " ".join(company.split())
    append_step(original, company, 'remove_extra_spaces')
    
    original = company
    company = re.sub(r"(?<=\b\w\b) (?=\b\w\b)", "", company)
    append_step(original, company, 'merge_single_letters')
    
    for key, value in self.and_mapping.items():
        original = company
        company = re.sub(rf"\b{key}\b", value, company)
        append_step(original, company, 'and_mapping')
    
    for key, value in self.digits_mapping.items():
        original = company
        company = re.sub(rf"\b{key}\b", str(value), company)
        append_step(original, company, 'digits_mapping')
    
    original = company
    company = company.strip()
    append_step(original, company, 'final_strip')
    
    words = company.lower().split(" ")
    good_words = []
    if len(words) > 1:
        if remove_acronyms:
            for word in words:
                if word in self.stopwords or word in self.acronyms:
                    continue
                good_words.append(word)
            original = company
            company = " ".join(good_words)
            append_step(original, company, 'remove_acronyms')
        
        if remove_locations:
            original = company
            company = self.remove_exact_matches(company, self.locations, use_blacklist=True)
            append_step(original, company, 'remove_locations')
    
    original = company
    company = " ".join(company.split())
    append_step(original, company, 'remove_extra_spaces_final')
    
    original = company
    company = company.strip()
    append_step(original, company, 'final_strip_again')
    
    # Join all the preprocessing steps into a single string
    step_preprocessing_str = ", ".join(step_preprocessing)
    
    return company, step_preprocessing_str
